/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;
import java.util.List;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import org.jfree.chart.ChartPanel;

/**
 *
 * @author neubr
 */
public class Menu_Clustering extends javax.swing.JPanel {

    public class Produk {

        int id;
        int terjual;
        double rating;
        int cluster;
        double distC1;
        double distC2;
        double distC3;

        public Produk(int id, int terjual, double rating) {
            this.id = id;
            this.terjual = terjual;
            this.rating = rating;
            this.cluster = -1;
            this.distC1 = 0;
            this.distC2 = 0;
            this.distC3 = 0;
        }
    }

    Connection conn = controller.koneksi.getKoneksi();
    ResultSet rs = null;
    PreparedStatement pst = null;
    int xx, xy;
    private DefaultTableModel tabmode, tabmode2, tabmode3;
    Object[] Baris = {"Id Produk", "Nama Produk", "Cluster"};

    public Menu_Clustering() {
        initComponents();
        Locale locale = new Locale("id", "ID");
        Locale.setDefault(locale);
//        try {
//            String deleteSql = "TRUNCATE TABLE cluster_result";
//            conn.prepareStatement(deleteSql).executeUpdate();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }

        datatable();
    }

    protected void datatable() {
        Object[] kolom = {"Id Produk", "Nama Produk", "Cluster", "Jarak C1", "Jarak C2", "Jarak C3"};
        tabmode = new DefaultTableModel(new Object[][]{}, kolom);

        String sql = "SELECT b.id_produk AS id, b.nama_produk AS nama, a.cluster, "
                + "a.dist_c1, a.dist_c2, a.dist_c3 "
                + "FROM cluster_result a "
                + "INNER JOIN produk b ON a.id_produk = b.id_produk "
                + "ORDER BY a.cluster ASC";

        try (java.sql.Statement stat = conn.createStatement(); ResultSet hasil = stat.executeQuery(sql)) {

            while (hasil.next()) {
                tabmode.addRow(new Object[]{
                    hasil.getString("id"),
                    hasil.getString("nama"),
                    hasil.getInt("cluster"),
                    String.format("%.4f", hasil.getDouble("dist_c1")), // 4 digit desimal
                    String.format("%.4f", hasil.getDouble("dist_c2")),
                    String.format("%.4f", hasil.getDouble("dist_c3"))
                });
            }
            tabel_clustering.setModel(tabmode);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Data gagal dipanggil: " + e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrp_Jeniskelamin = new javax.swing.ButtonGroup();
        dateChooser1 = new com.raven.datechooser.DateChooser();
        dateChooser2 = new com.raven.datechooser.DateChooser();
        pn_Main = new javax.swing.JPanel();
        pn_View = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel_clustering = new Custom.Custom_JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bt_cari = new Custom.Custom_JButtonRounded();
        bt_cari1 = new Custom.Custom_JButtonRounded();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setLayout(new java.awt.CardLayout());

        pn_Main.setBackground(new java.awt.Color(255, 255, 255));
        pn_Main.setPreferredSize(new java.awt.Dimension(1028, 658));
        pn_Main.setLayout(new java.awt.CardLayout());

        pn_View.setBackground(new java.awt.Color(255, 255, 255));
        pn_View.setPreferredSize(new java.awt.Dimension(1028, 658));

        tabel_clustering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabel_clustering.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabel_clusteringMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabel_clustering);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Hasil Clustering");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Transaksi > Clustering");
        jLabel2.setPreferredSize(new java.awt.Dimension(176, 19));

        bt_cari.setBackground(new java.awt.Color(255, 102, 102));
        bt_cari.setForeground(new java.awt.Color(255, 255, 255));
        bt_cari.setText("KALKULASI");
        bt_cari.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        bt_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cariActionPerformed(evt);
            }
        });

        bt_cari1.setBackground(new java.awt.Color(255, 102, 102));
        bt_cari1.setForeground(new java.awt.Color(255, 255, 255));
        bt_cari1.setText("CETAK");
        bt_cari1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        bt_cari1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cari1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 206, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pn_ViewLayout = new javax.swing.GroupLayout(pn_View);
        pn_View.setLayout(pn_ViewLayout);
        pn_ViewLayout.setHorizontalGroup(
            pn_ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_ViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pn_ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_ViewLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 986, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_ViewLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pn_ViewLayout.createSequentialGroup()
                        .addComponent(bt_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bt_cari1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        pn_ViewLayout.setVerticalGroup(
            pn_ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_ViewLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pn_ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(pn_ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_cari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_cari1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pn_ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pn_Main.add(pn_View, "card2");

        add(pn_Main, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void bt_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cariActionPerformed
        List<Produk> data = new ArrayList<>();
        try {
            String sql = "SELECT p.id_produk, SUM(qty) jumlah, p.rating "
                    + "FROM produk p "
                    + "INNER JOIN penjualan pe ON p.id_produk = pe.id_produk "
                    + "GROUP BY id_produk";
            java.sql.Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery(sql);
            while (rs.next()) {
                data.add(new Produk(rs.getInt(1), rs.getInt(2), rs.getDouble(3)));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "data gagal dipanggil: " + e);
        }

        int k = 3;
        double[][] centroid = new double[k][2];
// Inisialisasi centroid dari data awal
        for (int i = 0; i < k; i++) {
            centroid[i][0] = data.get(i).terjual;
            centroid[i][1] = data.get(i).rating;
        }

        boolean berubah;
        do {
            berubah = false;
            // Assign cluster + hitung jarak ke cluster
            for (Produk p : data) {
                double minDist = Double.MAX_VALUE;
                int clusterTerbaik = -1;

                // Hitung jarak ke setiap cluster
                for (int c = 0; c < k; c++) {
                    double dist = Math.sqrt(Math.pow(p.terjual - centroid[c][0], 2)
                            + Math.pow(p.rating - centroid[c][1], 2));
                    if (c == 0) {
                        p.distC1 = dist;
                    }
                    if (c == 1) {
                        p.distC2 = dist;
                    }
                    if (c == 2) {
                        p.distC3 = dist;
                    }

                    if (dist < minDist) {
                        minDist = dist;
                        clusterTerbaik = c;
                    }
                }

                if (p.cluster != clusterTerbaik) {
                    p.cluster = clusterTerbaik;
                    berubah = true;
                }
            }

            // Update centroid
            double[][] total = new double[k][2];
            int[] count = new int[k];
            for (Produk p : data) {
                total[p.cluster][0] += p.terjual;
                total[p.cluster][1] += p.rating;
                count[p.cluster]++;
            }
            for (int c = 0; c < k; c++) {
                if (count[c] > 0) {
                    centroid[c][0] = total[c][0] / count[c];
                    centroid[c][1] = total[c][1] / count[c];
                }
            }
        } while (berubah);

        // Simpan hasil ke DB
        try {
            String deleteSql = "TRUNCATE TABLE cluster_result";
            conn.prepareStatement(deleteSql).executeUpdate();

            String insertSql = "INSERT INTO cluster_result (id_produk, cluster, dist_c1, dist_c2, dist_c3) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement ps = conn.prepareStatement(insertSql);
            for (Produk p : data) {
                ps.setInt(1, p.id);
                ps.setInt(2, p.cluster);
                ps.setDouble(3, p.distC1);
                ps.setDouble(4, p.distC2);
                ps.setDouble(5, p.distC3);
                ps.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        datatable();

// ===== ELBOW METHOD =====
        DefaultCategoryDataset elbowDataset = new DefaultCategoryDataset();
        for (int testK = 1; testK <= 10; testK++) {
            List<Produk> tempData = new ArrayList<>();
            for (Produk p : data) {
                tempData.add(new Produk(p.id, p.terjual, p.rating));
            }
            double[][] tempCentroid = new double[testK][2];
            for (int i = 0; i < testK; i++) {
                tempCentroid[i][0] = tempData.get(i % tempData.size()).terjual;
                tempCentroid[i][1] = tempData.get(i % tempData.size()).rating;
            }
            boolean berubahTest;
            do {
                berubahTest = false;
                for (Produk p : tempData) {
                    double minDist = Double.MAX_VALUE;
                    int clusterTerbaik = -1;
                    for (int c = 0; c < testK; c++) {
                        double dist = Math.sqrt(Math.pow(p.terjual - tempCentroid[c][0], 2)
                                + Math.pow(p.rating - tempCentroid[c][1], 2));
                        if (dist < minDist) {
                            minDist = dist;
                            clusterTerbaik = c;
                        }
                    }
                    if (p.cluster != clusterTerbaik) {
                        p.cluster = clusterTerbaik;
                        berubahTest = true;
                    }
                }
                double[][] total = new double[testK][2];
                int[] count = new int[testK];
                for (Produk p : tempData) {
                    total[p.cluster][0] += p.terjual;
                    total[p.cluster][1] += p.rating;
                    count[p.cluster]++;
                }
                for (int c = 0; c < testK; c++) {
                    if (count[c] > 0) {
                        tempCentroid[c][0] = total[c][0] / count[c];
                        tempCentroid[c][1] = total[c][1] / count[c];
                    }
                }
            } while (berubahTest);

            double sse = hitungSSE(tempData, tempCentroid);
            elbowDataset.addValue(sse, "SSE", String.valueOf(testK));
        }

        JFreeChart elbowChart = ChartFactory.createLineChart(
                "Elbow Method",
                "Jumlah Cluster (k)",
                "SSE",
                elbowDataset
        );
        ChartPanel elbowChartPanel = new ChartPanel(elbowChart);
        elbowChartPanel.setPreferredSize(new java.awt.Dimension(jPanel1.getWidth(), jPanel1.getHeight()));

        jPanel1.removeAll();
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(elbowChartPanel);
        jPanel1.validate();
        jPanel1.repaint();

// ===== PIE CHART =====
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        for (int c = 0; c < k; c++) {
            int countCluster = 0;
            for (Produk p : data) {
                if (p.cluster == c) {
                    countCluster++;
                }
            }
            pieDataset.setValue("Cluster " + (c + 1), countCluster);
        }

        JFreeChart pieChart = ChartFactory.createPieChart(
                "Distribusi Produk per Cluster",
                pieDataset,
                true, true, false
        );

        ChartPanel pieChartPanel = new ChartPanel(pieChart);
        pieChartPanel.setPreferredSize(new java.awt.Dimension(jPanel2.getWidth(), jPanel2.getHeight()));

        jPanel2.removeAll();
        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(pieChartPanel);
        jPanel2.validate();
        jPanel2.repaint();


    }//GEN-LAST:event_bt_cariActionPerformed

    private double hitungSSE(List<Produk> data, double[][] centroid) {
        double sse = 0.0;
        for (Produk p : data) {
            int c = p.cluster;
            double dist = Math.pow(p.terjual - centroid[c][0], 2)
                    + Math.pow(p.rating - centroid[c][1], 2);
            sse += dist;
        }
        return sse;
    }


    private void tabel_clusteringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabel_clusteringMouseClicked

    }//GEN-LAST:event_tabel_clusteringMouseClicked

    private void bt_cari1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cari1ActionPerformed
        try {
            // Path file jrxml dan jasper
            String jrxmlPath = "./src/Report/reportclustering.jrxml";
            String jasperPath = "./src/Report/reportclustering.jasper";

            // Compile jrxml ke jasper (auto jika ada perubahan)
            JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath);

            // Parameter untuk report (kosong kalau tidak ada)
            HashMap<String, Object> parameter = new HashMap<>();
            parameter.put("IMAGE_PATH", "./src/Image/Kopken.png"); // relative path

            // Isi laporan dengan data dari koneksi database
            JasperPrint print = JasperFillManager.fillReport(jasperPath, parameter, conn);

            // Tampilkan report
            JasperViewer.viewReport(print, false);

        } catch (JRException e) {
            JOptionPane.showMessageDialog(null, "Gagal membuat laporan: " + e.getMessage());
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_bt_cari1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Custom.Custom_JButtonRounded bt_cari;
    private Custom.Custom_JButtonRounded bt_cari1;
    private javax.swing.ButtonGroup btngrp_Jeniskelamin;
    private com.raven.datechooser.DateChooser dateChooser1;
    private com.raven.datechooser.DateChooser dateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pn_Main;
    private javax.swing.JPanel pn_View;
    private Custom.Custom_JTable tabel_clustering;
    // End of variables declaration//GEN-END:variables
}
